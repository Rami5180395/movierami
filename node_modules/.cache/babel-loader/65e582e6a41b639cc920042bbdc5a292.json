{"ast":null,"code":"var _jsxFileName = \"/home/rami/Desktop/ramirezmovie/React-Movie-App/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { BASE_URL, API_KEY } from '../../config';\nimport Spinner from '../elements/Spinner/Spinner';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: [],\n      loadingMovies: false,\n      loadingActors: false,\n      loadingVideos: false,\n      actors: [],\n      directors: [],\n      visible: 6,\n      // This state is for how many actors rendered.\n      movieVideos: []\n    };\n\n    this.getMovieWithId = moviesEndPoint => {\n      const {\n        match\n      } = this.props;\n      fetch(moviesEndPoint).then(response => response.json()).then(movie => {\n        // console.log(movie);\n        if (movie.overview !== \"\") {\n          this.setState({\n            movie,\n            loadingMovies: false\n          });\n        } else {\n          // if have not turkish overview fetch this \n          let engEndPoint = `${BASE_URL}/movie/${match.params.movieId}?api_key=${API_KEY}`;\n          fetch(engEndPoint).then(response => response.json()).then(movie => {\n            this.setState({\n              movie,\n              loadingMovies: false\n            });\n          });\n        }\n      });\n    };\n\n    this.getDirectorsAndActors = creditsEndPoint => {\n      fetch(creditsEndPoint).then(response => response.json()).then(credits => {\n        // console.log(credits)\n        const filterDirector = credits.crew.filter(person => person.job === \"Director\"); // filter directors from all employees\n        // console.log(credits.crew)\n\n        if (filterDirector.length) {\n          this.setState({\n            actors: credits.cast,\n            directors: filterDirector[0].name,\n            loadingActors: false\n          });\n        } else {\n          this.setState({\n            actors: credits.cast,\n            directors: \"Bilgi Yok\",\n            loadingActors: false\n          });\n        }\n      });\n    };\n\n    this.getVideosWithId = movieVideosEndPoint => {\n      fetch(movieVideosEndPoint).then(response => response.json()).then(videos => {\n        if (videos.results.length) {\n          console.log(videos);\n          this.setState({\n            loadingVideos: false,\n            movieVideos: videos.results\n          });\n        } else {\n          this.setState({\n            loadingVideos: false\n          });\n        }\n      });\n    };\n\n    this.loadMore = () => {\n      this.setState({\n        visible: this.state.visible + 6\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      match\n    } = this.props;\n    this.setState({ ...this.state,\n      loadingMovies: true,\n      loadingActors: true,\n      loadingVideos: true\n    });\n    let moviesEndPoint = `${BASE_URL}/movie/${match.params.movieId}?api_key=${API_KEY}&language=tr`;\n    let creditsEndPoint = `${BASE_URL}/movie/${match.params.movieId}/credits?api_key=${API_KEY}`;\n    this.getMovieWithId(moviesEndPoint);\n    this.getDirectorsAndActors(creditsEndPoint);\n    let movieVideosEndPoint = `${BASE_URL}/movie/${match.params.movieId}/videos?api_key=${API_KEY}&language=en-US`;\n    this.getVideosWithId(movieVideosEndPoint);\n  }\n\n  render() {\n    const {\n      movie,\n      loadingActors,\n      loadingMovies,\n      actors,\n      directors,\n      visible,\n      movieVideos,\n      loadingVideos\n    } = this.state;\n    const {\n      location,\n      getFavouriteMovies\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, loadingActors || loadingMovies || loadingVideos ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 69\n      }\n    }) : movie && actors.length && movieVideos ? /*#__PURE__*/React.createElement(MovieInfo, {\n      movieInfo: movie,\n      actors: actors,\n      directors: directors,\n      searchWord: location.searchWord,\n      visible: visible,\n      loadMore: this.loadMore,\n      loading: loadingActors || loadingMovies,\n      getFavouriteMovies: getFavouriteMovies,\n      movieVideos: movieVideos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }) : null, !actors.length && !loadingActors ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 56\n      }\n    }, \"Film Bulunamad\\u0131! \") : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/home/rami/Desktop/ramirezmovie/React-Movie-App/src/components/Movie/Movie.js"],"names":["React","Component","BASE_URL","API_KEY","Spinner","MovieInfo","Movie","state","movie","loadingMovies","loadingActors","loadingVideos","actors","directors","visible","movieVideos","getMovieWithId","moviesEndPoint","match","props","fetch","then","response","json","overview","setState","engEndPoint","params","movieId","getDirectorsAndActors","creditsEndPoint","credits","filterDirector","crew","filter","person","job","length","cast","name","getVideosWithId","movieVideosEndPoint","videos","results","console","log","loadMore","componentDidMount","render","location","getFavouriteMovies","searchWord"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BASE_URL, API_KEY } from '../../config';\nimport Spinner from '../elements/Spinner/Spinner';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\n\nclass Movie extends Component {\n\n    state = {\n        movie: [],\n        loadingMovies: false,\n        loadingActors: false,\n        loadingVideos: false,\n        actors: [],\n        directors: [],\n        visible: 6, // This state is for how many actors rendered.\n        movieVideos: [],\n    }\n\n    componentDidMount() {\n        const { match } = this.props;\n\n        this.setState({\n            ...this.state,\n            loadingMovies: true,\n            loadingActors: true,\n            loadingVideos: true\n        })\n\n        let moviesEndPoint = `${BASE_URL}/movie/${match.params.movieId}?api_key=${API_KEY}&language=tr`\n        let creditsEndPoint = `${BASE_URL}/movie/${match.params.movieId}/credits?api_key=${API_KEY}`;\n        this.getMovieWithId(moviesEndPoint);\n        this.getDirectorsAndActors(creditsEndPoint);\n\n        let movieVideosEndPoint = `${BASE_URL}/movie/${match.params.movieId}/videos?api_key=${API_KEY}&language=en-US`\n        this.getVideosWithId(movieVideosEndPoint);\n\n    }\n\n    getMovieWithId = moviesEndPoint => {\n        const { match } = this.props;\n\n        fetch(moviesEndPoint)\n            .then(response => response.json())\n            .then((movie) => {\n                // console.log(movie);\n\n                if (movie.overview !== \"\") {\n                    this.setState({\n                        movie,\n                        loadingMovies: false\n                    })\n                }\n                else { // if have not turkish overview fetch this \n                    let engEndPoint = `${BASE_URL}/movie/${match.params.movieId}?api_key=${API_KEY}`\n                    fetch(engEndPoint)\n                        .then(response => response.json())\n                        .then((movie) => {\n                            this.setState({\n                                movie,\n                                loadingMovies: false\n                            })\n                        })\n                }\n            })\n    }\n\n    getDirectorsAndActors = creditsEndPoint => {\n        fetch(creditsEndPoint)\n            .then(response => response.json())\n            .then((credits) => {\n                    // console.log(credits)\n                    const filterDirector = credits.crew.filter(person => person.job === \"Director\"); // filter directors from all employees\n                    // console.log(credits.crew)\n                    if (filterDirector.length) {\n                        this.setState({\n                            actors: credits.cast,\n                            directors: filterDirector[0].name,\n                            loadingActors: false })}\n                    else {\n                        this.setState({\n                            actors: credits.cast,\n                            directors: \"Bilgi Yok\",\n                            loadingActors: false\n                        })}\n            })\n    }\n\n    getVideosWithId = movieVideosEndPoint => {\n        fetch(movieVideosEndPoint)\n            .then(response => response.json())\n            .then((videos) => {\n                if (videos.results.length) {\n                    console.log(videos)\n                    this.setState({\n                        loadingVideos: false,\n                        movieVideos: videos.results\n                    })\n                }\n                else {\n                    this.setState({\n                        loadingVideos: false\n                    })\n                }\n\n            })\n    }\n\n    loadMore = () => {\n        this.setState({\n            visible: this.state.visible + 6,\n        })\n    }\n\n    render() {\n        const { movie, loadingActors, loadingMovies, actors, directors, visible, movieVideos, loadingVideos } = this.state\n        const { location, getFavouriteMovies } = this.props\n        return (\n            <React.Fragment>\n                { loadingActors || loadingMovies || loadingVideos ? <Spinner /> :\n                    (movie && actors.length && movieVideos) ?\n                        <MovieInfo\n                            movieInfo={movie}\n                            actors={actors}\n                            directors={directors}\n                            searchWord={location.searchWord}\n                            visible={visible}\n                            loadMore={this.loadMore}\n                            loading={(loadingActors || loadingMovies)}\n                            getFavouriteMovies={getFavouriteMovies}\n                            movieVideos={movieVideos}\n                        /> : null\n                }\n\n                {\n                    !actors.length && !loadingActors ? <h1>Film Bulunamadı! </h1> : null\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Movie;\n\n"]},"metadata":{},"sourceType":"module"}